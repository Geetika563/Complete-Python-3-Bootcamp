Object = In Python, an object is a fundamental concept that represents a specific instance of a data structure 
or a class. Almost everything in Python is an object, including numbers, strings, lists, dictionaries, functions,
and even classes themselves.

set: Unordered collecetion of unique elements.   set={1,2}
  .add(1)  [to add an ele into a set]
  What is the result of set([1,1,2,3]) == {1,2,3}

If we don't want to assign anything just give->  b=None  [this wont return anything]
=> type(my_list)    [this gives the data type of my_list which is  a list]

To write in a file:-
    %%writefile myfile.txt
    Helloo
    HII
    How are yuhh

//for all other addons, visit solutions page in 1st module.

=> to open this => myfile=open(myfile.txt)
=>to read this =>  myfile.read()              [gives the text in a file as a string with \n for a new line]
=> if we again read this, nothing will be printed so doo=> myfile.seek(0)
    [this will make the cursor to be at starting index to read again]
=>  myfile.readlines()    [to give each line as sepearate object(more convenient to read)  with \n]
=> myfile.close()   [we need to close the file, if later on we want to edit this file]
(or)
with open(myfile.txt) as my_new_file:
  contents=my_new_file.read()    [now no need to close the file]


break= breakes out of the loop 
continue= goes to the top of the closest loop
pass= just doesnot do anything.
Generators->
list[range(0,10,2)]    =>gives [0,2,4,6,8]
Enumerate-> gives the index count and letter at that particular word.
zip-> oppositr to enumerate, zips 2(and also more) lists and return as a tuple.
list(zip(list1,list2))   =>    [(1,'a'),(2,'b')]
in  -> to check if, it is there in that list or not. eg->    2 in [1,2,3]   gives true;   'my_key' in {'my_key':123}=>True;
min(list)=> gives the minimum value; max(list)=>gives max value
